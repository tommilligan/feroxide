var N = null;var searchIndex = {};
searchIndex["feroxide"]={"doc":"","items":[[3,"Atom","feroxide","An atom",N,N],[12,"number","","Atom Number (Hydrogen: 1)",0,N],[12,"group","","Atom Group (Hydrogen: 1)",0,N],[12,"symbol","","Atom symbol (Hydrogen: H)",0,N],[12,"name","","Atom name (Hydrogen: hydrogen)",0,N],[12,"mass","","Atom mass (Hydrogen: 1.008)",0,N],[12,"diatomic","","",0,N],[3,"Container","","A container for elements",N,N],[12,"contents","","A vector with the contents of this container",1,N],[12,"available_energy","","The amount of energy available",1,N],[3,"ContainerCompound","","A compound for containers",N,N],[12,"element","","The element it contains",2,N],[12,"moles","","The amount of moles of this element",2,N],[3,"ELECTRON","","",N,N],[3,"Ion","","An `Ion`",N,N],[12,"molecule","","The molecule of this ion",3,N],[12,"charge","","The charge of this ion",3,N],[3,"Molecule","","A molecule",N,N],[12,"compounds","","The compounds it contains",4,N],[3,"MoleculeCompound","","A compound of a molecule",N,N],[12,"atom","","The atom it uses",5,N],[12,"amount","","The amount",5,N],[3,"ElemReaction","","An elementair reaction (not containing ions)",N,N],[12,"lhs","","The left-hand-side",6,N],[12,"rhs","","The right-hand-side",6,N],[12,"is_equilibrium","","",6,N],[3,"ReactionSide","","A side of a reaction",N,N],[12,"compounds","","The compounds of this side",7,N],[3,"ReactionCompound","","A reaction compound",N,N],[12,"element","","The element it uses",8,N],[12,"amount","","The amount of moles needed",8,N],[3,"RedoxReaction","","A Redox reaction",N,N],[12,"reductor","","The reductor",9,N],[12,"oxidator","","The oxidator",9,N],[3,"AtomGroup","","",N,N],[12,"0","","",10,N],[3,"AtomMass","","",N,N],[12,"0","","",11,N],[3,"AtomNumber","","",N,N],[12,"0","","",12,N],[3,"Energy","","",N,N],[12,"0","","",13,N],[3,"AtomCharge","","",N,N],[12,"0","","",14,N],[3,"Mass","","",N,N],[12,"0","","",15,N],[3,"Moles","","",N,N],[12,"0","","",16,N],[3,"SEP","","",N,N],[12,"0","","",17,N],[3,"SEF","","",N,N],[12,"0","","",18,N],[5,"rc_to_cc","","Convert a given `ReactionCompound` into a `ContainerCompound`",N,[[["reactioncompound"]],["containercompound"]]],[5,"get_redox_reaction","","",N,[[["container"]],["option",["redoxreaction"]]]],[5,"gcd","","Calculate Greatest Common Divisor (GCD), using Euclides' algorithm",N,[[["i32"],["i32"]],["i32"]]],[5,"number_to_greek","","Convert a number to greek notation",N,[[["u8"]],["string"]]],[5,"number_to_roman","","Convert a number to roman notaion",N,[[["i8"]],["string"]]],[5,"subscript","","",N,[[["u8"]],["string"]]],[5,"superscript","","",N,[[["u8"]],["string"]]],[5,"ion_superscript","","",N,[[["atomcharge"]],["string"]]],[0,"parse_macros","","",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["atom"]]],[11,"from_string","","Convert a string representation to an `Atom`",0,[[["str"]],["option",["atom"]]]],[11,"charge_by_group","","Get the charge an atom has based on its group",0,[[["self"]],["option",["atomcharge"]]]],[11,"eq","","Two `Atom`s are equal when their atom numbers are equal",0,[[["self"],["atom"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"symbol","","",0,[[["self"]],["string"]]],[11,"name","","",0,[[["self"]],["string"]]],[11,"mass","","",0,[[["self"]],["atommass"]]],[11,"is_diatomic","","",0,[[["self"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["container"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["containercompound"]]],[11,"react","","Applies given `Reaction` to `Container` Removing the elements on the left-hand side and adding the elements on the right-hand side. If there is enough energy for the reaction,Â that amount will be consumed otherwise the reaction won't occur. Returns if the reaction succeeded",1,[[["self"],["r"]],["bool"]]],[11,"contains","","Check if the container contains a container compound",1,[[["self"],["containercompound"]],["bool"]]],[11,"has_elements","","Check if the container has all given elements",1,N],[11,"has_enough_compounds_for_reaction","","Check if the container has all required elements for a reaction to occur NOTE: Ignores electrons",1,[[["self"],["elemreaction"]],["bool"]]],[11,"remove_elements","","Remove given elements from container",1,N],[11,"add_elements","","Add given elements to container",1,N],[11,"get_redox_reactions","","Get all possible redox reactions and their SEP's",1,[[["self"]],["vec"]]],[11,"stringify","","Convert container to a nice string for displaying",1,[[["self"]],["string"]]],[11,"ion_from_string","","",1,[[["str"]],["option",["container"]]]],[11,"molecule_from_string","","",1,[[["str"]],["option",["container"]]]],[11,"ion_from_string","","",2,[[["str"]],["option",["containercompound"]]]],[11,"molecule_from_string","","",2,[[["str"]],["option",["containercompound"]]]],[11,"eq","","Two container compounds are equal when their elements are equal",2,[[["self"],["containercompound"]],["bool"]]],[11,"hash","","",2,[[["self"],["h"]]]],[11,"get_charge","","",2,[[["self"]],["option",["atomcharge"]]]],[11,"get_molecule","","",2,[[["self"]],["option",["molecule"]]]],[11,"get_ion","","",2,[[["self"]],["option",["ion"]]]],[11,"symbol","","",2,[[["self"]],["string"]]],[11,"name","","",2,[[["self"]],["string"]]],[11,"mass","","",2,[[["self"]],["atommass"]]],[11,"is_diatomic","","",2,[[["self"]],["bool"]]],[11,"deref","","",19,[[["self"]],["ion"]]],[11,"initialize","","",19,[[["self"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["ion"]]],[11,"from_string","","Convert a string representation of an `Ion` into one",3,[[["str"]],["option",["ion"]]]],[11,"from_molecule","","Convert a `Molecule` into an `Ion`",3,[[["molecule"]],["ion"]]],[11,"calculate_charge","","Calculate the charge of this `Ion`",3,[[["self"]],["option",["atomcharge"]]]],[11,"get_charge","","",3,[[["self"]],["option",["atomcharge"]]]],[11,"get_molecule","","",3,[[["self"]],["option",["molecule"]]]],[11,"get_ion","","",3,[[["self"]],["option",["ion"]]]],[11,"symbol","","",3,[[["self"]],["string"]]],[11,"name","","",3,[[["self"]],["string"]]],[11,"mass","","",3,[[["self"]],["atommass"]]],[11,"is_diatomic","","",3,[[["self"]],["bool"]]],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"hash","","",3,[[["self"],["h"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["molecule"]],["bool"]]],[11,"ne","","",4,[[["self"],["molecule"]],["bool"]]],[11,"clone","","",4,[[["self"]],["molecule"]]],[11,"hash","","",4,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["moleculecompound"]],["bool"]]],[11,"ne","","",5,[[["self"],["moleculecompound"]],["bool"]]],[11,"clone","","",5,[[["self"]],["moleculecompound"]]],[11,"hash","","",5,N],[11,"from_string","","Convert a string representation of a molecule into one TODO: Parse parentheses, e.g.  Ca3(PO4)2",4,[[["str"]],["option",["molecule"]]]],[11,"from_string","","Takes a symbol string representing a MoleculeCompound, and turns it into one",5,[[["str"]],["option",["moleculecompound"]]]],[11,"from_atom","","Converts an Atom into a MoleculeCompound, taking care of diatomic ones",5,[[["atom"]],["moleculecompound"]]],[11,"symbol","","",4,[[["self"]],["string"]]],[11,"name","","",4,[[["self"]],["string"]]],[11,"mass","","",4,[[["self"]],["atommass"]]],[11,"is_diatomic","","",4,[[["self"]],["bool"]]],[11,"symbol","","",5,[[["self"]],["string"]]],[11,"name","","",5,[[["self"]],["string"]]],[11,"mass","","",5,[[["self"]],["atommass"]]],[11,"is_diatomic","","",5,[[["self"]],["bool"]]],[11,"get_charge","","",4,[[["self"]],["option",["atomcharge"]]]],[11,"get_molecule","","",4,[[["self"]],["option",["molecule"]]]],[11,"get_ion","","",4,[[["self"]],["option",["ion"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["elemreaction"]],["bool"]]],[11,"ne","","",6,[[["self"],["elemreaction"]],["bool"]]],[11,"clone","","",6,[[["self"]],["elemreaction"]]],[11,"hash","","",6,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["reactionside"]],["bool"]]],[11,"ne","","",7,[[["self"],["reactionside"]],["bool"]]],[11,"clone","","",7,[[["self"]],["reactionside"]]],[11,"hash","","",7,N],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["reactioncompound"]]],[11,"ion_from_string","","Convert a string representation of an elementary reaction into one",6,[[["str"]],["option",["elemreaction"]]]],[11,"molecule_from_string","","Convert a string representation of a reaction into one",6,[[["str"]],["option",["elemreaction"]]]],[11,"reaction_sign","","",6,[[["self"]],["str"]]],[11,"swap","","Swap the equation",6,[[["self"]],["self"]]],[11,"ion_from_string","","Convert a string representation of a reactionside into one",7,[[["str"]],["option",["reactionside"]]]],[11,"molecule_from_string","","Convert a string representation of a reactionside into one",7,[[["str"]],["option",["reactionside"]]]],[11,"total_charge","","Calculate the total charge of this reaction side",7,[[["self"]],["atomcharge"]]],[11,"energy","","Calculate the energy this side has",7,[[["self"]],["energy"]]],[11,"total_atoms","","Calculate the total amount of atoms this side contains",7,[[["self"],["bool"]],["hashmap",["atomnumber","u16"]]]],[11,"ion_from_string","","Convert a string representation of a reaction compound into one",8,[[["str"]],["option",["reactioncompound"]]]],[11,"molecule_from_string","","Convert a string representation of a reaction compound into one",8,[[["str"]],["option",["reactioncompound"]]]],[11,"equalise","","NOTE: This function is still a WIP!",6,[[["self"]],["bool"]]],[11,"is_valid","","",6,[[["self"]],["bool"]]],[11,"energy_cost","","",6,[[["self"]],["energy"]]],[11,"elem_reaction","","",6,[[["self"]],["elemreaction"]]],[11,"add","","Adding two ReactionSide's adds their compounds",7,[[["self"],["reactionside"]],["reactionside"]]],[11,"mul","","Multiplying a ReactionSide with a number multiplies the amount of all compounds of that side",7,[[["self"],["u16"]],["reactionside"]]],[11,"eq","","Two ReactionCompound's are equal if their elements are equal",8,[[["self"],["reactioncompound"]],["bool"]]],[11,"hash","","",8,[[["self"],["h"]]]],[11,"symbol","","",6,[[["self"]],["string"]]],[11,"name","","",6,[[["self"]],["string"]]],[11,"mass","","",6,[[["self"]],["atommass"]]],[11,"is_diatomic","","",6,[[["self"]],["bool"]]],[11,"symbol","","",7,[[["self"]],["string"]]],[11,"name","","",7,[[["self"]],["string"]]],[11,"mass","","",7,[[["self"]],["atommass"]]],[11,"is_diatomic","","",7,[[["self"]],["bool"]]],[11,"symbol","","",8,[[["self"]],["string"]]],[11,"name","","",8,[[["self"]],["string"]]],[11,"mass","","",8,[[["self"]],["atommass"]]],[11,"is_diatomic","","",8,[[["self"]],["bool"]]],[11,"get_charge","","",8,[[["self"]],["option",["atomcharge"]]]],[11,"get_molecule","","",8,[[["self"]],["option",["molecule"]]]],[11,"get_ion","","",8,[[["self"]],["option",["ion"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["redoxreaction"]],["bool"]]],[11,"ne","","",9,[[["self"],["redoxreaction"]],["bool"]]],[11,"clone","","",9,[[["self"]],["redoxreaction"]]],[11,"equalise","","",9,[[["self"]],["bool"]]],[11,"is_valid","","",9,[[["self"]],["bool"]]],[11,"energy_cost","","",9,[[["self"]],["energy"]]],[11,"elem_reaction","","",9,[[["self"]],["elemreaction",["ion"]]]],[11,"symbol","","",9,[[["self"]],["string"]]],[11,"name","","",9,[[["self"]],["string"]]],[11,"mass","","",9,[[["self"]],["atommass"]]],[11,"is_diatomic","","",9,[[["self"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["atomgroup"]]],[11,"eq","","",10,[[["self"],["atomgroup"]],["bool"]]],[11,"ne","","",10,[[["self"],["atomgroup"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["atomgroup"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["atomgroup"]],["bool"]]],[11,"le","","",10,[[["self"],["atomgroup"]],["bool"]]],[11,"gt","","",10,[[["self"],["atomgroup"]],["bool"]]],[11,"ge","","",10,[[["self"],["atomgroup"]],["bool"]]],[11,"hash","","",10,N],[11,"from","","",10,[[["atomgroup_type"]],["self"]]],[11,"cmp","","",10,[[["self"],["self"]],["ordering"]]],[11,"add","","",10,[[["self"],["self"]],["self"]]],[11,"add_assign","","",10,[[["self"],["self"]]]],[11,"sub","","",10,[[["self"],["self"]],["self"]]],[11,"sub_assign","","",10,[[["self"],["self"]]]],[11,"mul","","",10,[[["self"],["atomgroup_type"]],["self"]]],[11,"mul_assign","","",10,[[["self"],["atomgroup_type"]]]],[11,"div","","",10,[[["self"],["atomgroup_type"]],["self"]]],[11,"div_assign","","",10,[[["self"],["atomgroup_type"]]]],[11,"rem","","",10,[[["self"],["atomgroup_type"]],["self"]]],[11,"rem_assign","","",10,[[["self"],["atomgroup_type"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["atommass"]]],[11,"eq","","",11,[[["self"],["atommass"]],["bool"]]],[11,"ne","","",11,[[["self"],["atommass"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["atommass"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["atommass"]],["bool"]]],[11,"le","","",11,[[["self"],["atommass"]],["bool"]]],[11,"gt","","",11,[[["self"],["atommass"]],["bool"]]],[11,"ge","","",11,[[["self"],["atommass"]],["bool"]]],[11,"from","","",11,[[["atommass_type"]],["self"]]],[11,"cmp","","",11,[[["self"],["self"]],["ordering"]]],[11,"add","","",11,[[["self"],["self"]],["self"]]],[11,"add_assign","","",11,[[["self"],["self"]]]],[11,"sub","","",11,[[["self"],["self"]],["self"]]],[11,"sub_assign","","",11,[[["self"],["self"]]]],[11,"mul","","",11,[[["self"],["atommass_type"]],["self"]]],[11,"mul_assign","","",11,[[["self"],["atommass_type"]]]],[11,"div","","",11,[[["self"],["atommass_type"]],["self"]]],[11,"div_assign","","",11,[[["self"],["atommass_type"]]]],[11,"rem","","",11,[[["self"],["atommass_type"]],["self"]]],[11,"rem_assign","","",11,[[["self"],["atommass_type"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["atomnumber"]]],[11,"eq","","",12,[[["self"],["atomnumber"]],["bool"]]],[11,"ne","","",12,[[["self"],["atomnumber"]],["bool"]]],[11,"partial_cmp","","",12,[[["self"],["atomnumber"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["atomnumber"]],["bool"]]],[11,"le","","",12,[[["self"],["atomnumber"]],["bool"]]],[11,"gt","","",12,[[["self"],["atomnumber"]],["bool"]]],[11,"ge","","",12,[[["self"],["atomnumber"]],["bool"]]],[11,"hash","","",12,N],[11,"from","","",12,[[["atomnumber_type"]],["self"]]],[11,"cmp","","",12,[[["self"],["self"]],["ordering"]]],[11,"add","","",12,[[["self"],["self"]],["self"]]],[11,"add_assign","","",12,[[["self"],["self"]]]],[11,"sub","","",12,[[["self"],["self"]],["self"]]],[11,"sub_assign","","",12,[[["self"],["self"]]]],[11,"mul","","",12,[[["self"],["atomnumber_type"]],["self"]]],[11,"mul_assign","","",12,[[["self"],["atomnumber_type"]]]],[11,"div","","",12,[[["self"],["atomnumber_type"]],["self"]]],[11,"div_assign","","",12,[[["self"],["atomnumber_type"]]]],[11,"rem","","",12,[[["self"],["atomnumber_type"]],["self"]]],[11,"rem_assign","","",12,[[["self"],["atomnumber_type"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["energy"]]],[11,"eq","","",13,[[["self"],["energy"]],["bool"]]],[11,"ne","","",13,[[["self"],["energy"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["energy"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["energy"]],["bool"]]],[11,"le","","",13,[[["self"],["energy"]],["bool"]]],[11,"gt","","",13,[[["self"],["energy"]],["bool"]]],[11,"ge","","",13,[[["self"],["energy"]],["bool"]]],[11,"from","","",13,[[["energy_type"]],["self"]]],[11,"cmp","","",13,[[["self"],["self"]],["ordering"]]],[11,"add","","",13,[[["self"],["self"]],["self"]]],[11,"add_assign","","",13,[[["self"],["self"]]]],[11,"sub","","",13,[[["self"],["self"]],["self"]]],[11,"sub_assign","","",13,[[["self"],["self"]]]],[11,"mul","","",13,[[["self"],["energy_type"]],["self"]]],[11,"mul_assign","","",13,[[["self"],["energy_type"]]]],[11,"div","","",13,[[["self"],["energy_type"]],["self"]]],[11,"div_assign","","",13,[[["self"],["energy_type"]]]],[11,"rem","","",13,[[["self"],["energy_type"]],["self"]]],[11,"rem_assign","","",13,[[["self"],["energy_type"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["atomcharge"]]],[11,"eq","","",14,[[["self"],["atomcharge"]],["bool"]]],[11,"ne","","",14,[[["self"],["atomcharge"]],["bool"]]],[11,"partial_cmp","","",14,[[["self"],["atomcharge"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["atomcharge"]],["bool"]]],[11,"le","","",14,[[["self"],["atomcharge"]],["bool"]]],[11,"gt","","",14,[[["self"],["atomcharge"]],["bool"]]],[11,"ge","","",14,[[["self"],["atomcharge"]],["bool"]]],[11,"hash","","",14,N],[11,"from","","",14,[[["atomcharge_type"]],["self"]]],[11,"cmp","","",14,[[["self"],["self"]],["ordering"]]],[11,"add","","",14,[[["self"],["self"]],["self"]]],[11,"add_assign","","",14,[[["self"],["self"]]]],[11,"sub","","",14,[[["self"],["self"]],["self"]]],[11,"sub_assign","","",14,[[["self"],["self"]]]],[11,"mul","","",14,[[["self"],["atomcharge_type"]],["self"]]],[11,"mul_assign","","",14,[[["self"],["atomcharge_type"]]]],[11,"div","","",14,[[["self"],["atomcharge_type"]],["self"]]],[11,"div_assign","","",14,[[["self"],["atomcharge_type"]]]],[11,"rem","","",14,[[["self"],["atomcharge_type"]],["self"]]],[11,"rem_assign","","",14,[[["self"],["atomcharge_type"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["mass"]]],[11,"eq","","",15,[[["self"],["mass"]],["bool"]]],[11,"ne","","",15,[[["self"],["mass"]],["bool"]]],[11,"partial_cmp","","",15,[[["self"],["mass"]],["option",["ordering"]]]],[11,"lt","","",15,[[["self"],["mass"]],["bool"]]],[11,"le","","",15,[[["self"],["mass"]],["bool"]]],[11,"gt","","",15,[[["self"],["mass"]],["bool"]]],[11,"ge","","",15,[[["self"],["mass"]],["bool"]]],[11,"from","","",15,[[["mass_type"]],["self"]]],[11,"cmp","","",15,[[["self"],["self"]],["ordering"]]],[11,"add","","",15,[[["self"],["self"]],["self"]]],[11,"add_assign","","",15,[[["self"],["self"]]]],[11,"sub","","",15,[[["self"],["self"]],["self"]]],[11,"sub_assign","","",15,[[["self"],["self"]]]],[11,"mul","","",15,[[["self"],["mass_type"]],["self"]]],[11,"mul_assign","","",15,[[["self"],["mass_type"]]]],[11,"div","","",15,[[["self"],["mass_type"]],["self"]]],[11,"div_assign","","",15,[[["self"],["mass_type"]]]],[11,"rem","","",15,[[["self"],["mass_type"]],["self"]]],[11,"rem_assign","","",15,[[["self"],["mass_type"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["moles"]]],[11,"eq","","",16,[[["self"],["moles"]],["bool"]]],[11,"ne","","",16,[[["self"],["moles"]],["bool"]]],[11,"partial_cmp","","",16,[[["self"],["moles"]],["option",["ordering"]]]],[11,"lt","","",16,[[["self"],["moles"]],["bool"]]],[11,"le","","",16,[[["self"],["moles"]],["bool"]]],[11,"gt","","",16,[[["self"],["moles"]],["bool"]]],[11,"ge","","",16,[[["self"],["moles"]],["bool"]]],[11,"from","","",16,[[["moles_type"]],["self"]]],[11,"cmp","","",16,[[["self"],["self"]],["ordering"]]],[11,"add","","",16,[[["self"],["self"]],["self"]]],[11,"add_assign","","",16,[[["self"],["self"]]]],[11,"sub","","",16,[[["self"],["self"]],["self"]]],[11,"sub_assign","","",16,[[["self"],["self"]]]],[11,"mul","","",16,[[["self"],["moles_type"]],["self"]]],[11,"mul_assign","","",16,[[["self"],["moles_type"]]]],[11,"div","","",16,[[["self"],["moles_type"]],["self"]]],[11,"div_assign","","",16,[[["self"],["moles_type"]]]],[11,"rem","","",16,[[["self"],["moles_type"]],["self"]]],[11,"rem_assign","","",16,[[["self"],["moles_type"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["sep"]]],[11,"eq","","",17,[[["self"],["sep"]],["bool"]]],[11,"ne","","",17,[[["self"],["sep"]],["bool"]]],[11,"partial_cmp","","",17,[[["self"],["sep"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["sep"]],["bool"]]],[11,"le","","",17,[[["self"],["sep"]],["bool"]]],[11,"gt","","",17,[[["self"],["sep"]],["bool"]]],[11,"ge","","",17,[[["self"],["sep"]],["bool"]]],[11,"from","","",17,[[["sep_type"]],["self"]]],[11,"cmp","","",17,[[["self"],["self"]],["ordering"]]],[11,"add","","",17,[[["self"],["self"]],["self"]]],[11,"add_assign","","",17,[[["self"],["self"]]]],[11,"sub","","",17,[[["self"],["self"]],["self"]]],[11,"sub_assign","","",17,[[["self"],["self"]]]],[11,"mul","","",17,[[["self"],["sep_type"]],["self"]]],[11,"mul_assign","","",17,[[["self"],["sep_type"]]]],[11,"div","","",17,[[["self"],["sep_type"]],["self"]]],[11,"div_assign","","",17,[[["self"],["sep_type"]]]],[11,"rem","","",17,[[["self"],["sep_type"]],["self"]]],[11,"rem_assign","","",17,[[["self"],["sep_type"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["sef"]]],[11,"eq","","",18,[[["self"],["sef"]],["bool"]]],[11,"ne","","",18,[[["self"],["sef"]],["bool"]]],[11,"partial_cmp","","",18,[[["self"],["sef"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["sef"]],["bool"]]],[11,"le","","",18,[[["self"],["sef"]],["bool"]]],[11,"gt","","",18,[[["self"],["sef"]],["bool"]]],[11,"ge","","",18,[[["self"],["sef"]],["bool"]]],[11,"from","","",18,[[["sef_type"]],["self"]]],[11,"cmp","","",18,[[["self"],["self"]],["ordering"]]],[11,"add","","",18,[[["self"],["self"]],["self"]]],[11,"add_assign","","",18,[[["self"],["self"]]]],[11,"sub","","",18,[[["self"],["self"]],["self"]]],[11,"sub_assign","","",18,[[["self"],["self"]]]],[11,"mul","","",18,[[["self"],["sef_type"]],["self"]]],[11,"mul_assign","","",18,[[["self"],["sef_type"]]]],[11,"div","","",18,[[["self"],["sef_type"]],["self"]]],[11,"div_assign","","",18,[[["self"],["sef_type"]]]],[11,"rem","","",18,[[["self"],["sef_type"]],["self"]]],[11,"rem_assign","","",18,[[["self"],["sef_type"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[0,"data_atoms","","",N,N],[17,"IRON","feroxide::data_atoms","",N,N],[17,"ASTATINE","","",N,N],[17,"VANADIUM","","",N,N],[17,"THALLIUM","","",N,N],[17,"GERMANIUM","","",N,N],[17,"ANTIMONY","","",N,N],[17,"SCANDIUM","","",N,N],[17,"BROMINE","","",N,N],[17,"GOLD","","",N,N],[17,"POLONIUM","","",N,N],[17,"GALLIUM","","",N,N],[17,"RUBIDIUM","","",N,N],[17,"MANGANESE","","",N,N],[17,"RADON","","",N,N],[17,"SILICON","","",N,N],[17,"CARBON","","",N,N],[17,"SILVER","","",N,N],[17,"BARIUM","","",N,N],[17,"INDIUM","","",N,N],[17,"HELIUM","","",N,N],[17,"PLATINUM","","",N,N],[17,"KRYPTON","","",N,N],[17,"OXYGEN","","",N,N],[17,"CALCIUM","","",N,N],[17,"ZINC","","",N,N],[17,"MERCURY","","",N,N],[17,"SELENIUM","","",N,N],[17,"IODINE","","",N,N],[17,"NITROGEN","","",N,N],[17,"BORON","","",N,N],[17,"ARSENIC","","",N,N],[17,"BERYLLIUM","","",N,N],[17,"BISMUTH","","",N,N],[17,"HYDROGEN","","",N,N],[17,"TITANIUM","","",N,N],[17,"COPPER","","",N,N],[17,"CADMIUM","","",N,N],[17,"XENON","","",N,N],[17,"MAGNESIUM","","",N,N],[17,"NICKEL","","",N,N],[17,"COBALT","","",N,N],[17,"CHLORINE","","",N,N],[17,"ARGON","","",N,N],[17,"ALUMINIUM","","",N,N],[17,"LITHIUM","","",N,N],[17,"TIN","","",N,N],[17,"CAESIUM","","",N,N],[17,"SULFUR","","",N,N],[17,"NEON","","",N,N],[17,"PHOSPHORUS","","",N,N],[17,"POTASSIUM","","",N,N],[17,"SODIUM","","",N,N],[17,"CHROMIUM","","",N,N],[17,"FRANCIUM","","",N,N],[17,"TELLURIUM","","",N,N],[17,"LEAD","","",N,N],[17,"FLUORINE","","",N,N],[17,"ALL_ATOMS","","",N,N],[0,"data_ions","feroxide","",N,N],[3,"HYDROXIDE","feroxide::data_ions","",N,N],[3,"AMMONIUM","","",N,N],[3,"SULPHATE","","",N,N],[11,"deref","","",20,[[["self"]],["ion"]]],[11,"initialize","","",20,[[["self"]]]],[11,"deref","","",21,[[["self"]],["ion"]]],[11,"initialize","","",21,[[["self"]]]],[11,"deref","","",22,[[["self"]],["ion"]]],[11,"initialize","","",22,[[["self"]]]],[0,"data_molecules","feroxide","",N,N],[3,"WATER","feroxide::data_molecules","",N,N],[3,"CO2","","",N,N],[3,"AMMONIA","","",N,N],[3,"SUGAR","","",N,N],[3,"COPPER_SULFATE_HYDRATED","","",N,N],[11,"deref","","",23,[[["self"]],["molecule"]]],[11,"initialize","","",23,[[["self"]]]],[11,"deref","","",24,[[["self"]],["molecule"]]],[11,"initialize","","",24,[[["self"]]]],[11,"deref","","",25,[[["self"]],["molecule"]]],[11,"initialize","","",25,[[["self"]]]],[11,"deref","","",26,[[["self"]],["molecule"]]],[11,"initialize","","",26,[[["self"]]]],[11,"deref","","",27,[[["self"]],["molecule"]]],[11,"initialize","","",27,[[["self"]]]],[0,"data_sef","feroxide","",N,N],[3,"SEFMAP","feroxide::data_sef","",N,N],[5,"get_sef","","Get the Standard Enthalpy of Formation (SEF) of a ion",N,[[["ion"]],["option",["sef"]]]],[11,"deref","","",28,[[["self"]],["hashmap"]]],[11,"initialize","","",28,[[["self"]]]],[0,"data_sep","feroxide","",N,N],[3,"SEPMAP","feroxide::data_sep","",N,N],[5,"get_sep","","Get the Standard Electrode Potential (SEP) of a reaction",N,[[["elemreaction"]],["option",["sep"]]]],[5,"get_reactions_with_element","","",N,[[["ion"]],["vec"]]],[11,"deref","","",29,[[["self"]],["hashmap"]]],[11,"initialize","","",29,[[["self"]]]],[0,"display_impls","feroxide","",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[6,"AtomGroup_type","","should fit 1 to 18 [  ]",N,N],[6,"AtomMass_type","","should fit 0.0 to 294.0+, with normal precision [ gram / mol ]",N,N],[6,"AtomNumber_type","","should fit 0 to 118+ [  ]",N,N],[6,"Energy_type","","should fit 0.0 to 1e5+, with high precision [ Joule ]",N,N],[6,"AtomCharge_type","","should fit -7 to 7 [  ]",N,N],[6,"Mass_type","","should fit 0.0 to 1e5+, with high precision [ gram ]",N,N],[6,"Moles_type","","should fit 0.0 to 1e5+, with high precision [ mol ]",N,N],[6,"SEP_type","","should fit -5.0 to 5.0, with normal precision [ volt ]",N,N],[6,"SEF_type","","should fit -4000.0 to 2000.0, with normal precision [ kJ/mol ]",N,N],[8,"Element","","",N,N],[10,"get_charge","","Get the charge of the current Element",30,[[["self"]],["option",["atomcharge"]]]],[10,"get_molecule","","Get the molecule associated with the current Element",30,[[["self"]],["option",["molecule"]]]],[10,"get_ion","","Get the ion associated with the current Element",30,[[["self"]],["option",["ion"]]]],[8,"Properties","","",N,N],[10,"symbol","","Get the symbol of the current item",31,[[["self"]],["string"]]],[10,"name","","Get the name of the current item",31,[[["self"]],["string"]]],[10,"mass","","Get the mass of the current item",31,[[["self"]],["atommass"]]],[10,"is_diatomic","","Check if the item is a valid diatomic molecule",31,[[["self"]],["bool"]]],[11,"stringify","","Stringify the current item (default: self.symbol())",31,[[["self"]],["string"]]],[8,"Reaction","","",N,N],[10,"is_valid","","Check if the reaction is valid by comparing the amount of total atoms on both sides, and by checking if the total charge on both sides is equal",32,[[["self"]],["bool"]]],[10,"equalise","","Balance both sides of the equation to make sure it's valid Returns true if it managed to equalise it, false otherwise",32,[[["self"]],["bool"]]],[10,"energy_cost","","Calculate the cost of this reaction This can be negative in case of an exothermic reaction",32,[[["self"]],["energy"]]],[10,"elem_reaction","","Get the ElemReaction version",32,[[["self"]],["elemreaction"]]],[14,"is_upper","","",N,N],[14,"is_lower","","",N,N],[14,"is_number","","",N,N],[14,"is_letter","","",N,N],[14,"is_whitespace","","",N,N],[14,"is_separator","","",N,N],[14,"is_vowel","","",N,N],[14,"to_number","","converts a single char into a number",N,N],[14,"molecule_from_atom","","",N,N],[14,"ion_from_molecule","","",N,N],[14,"ion_from_atom","","",N,N],[14,"ion_from_string","","",N,N],[14,"molecule_from_string","","",N,N],[14,"atom_from_string","","",N,N],[11,"stringify","","Stringify the current item (default: self.symbol())",31,[[["self"]],["string"]]],[11,"from","","",33,[[["atomgroup"]],["self"]]],[11,"from","","",34,[[["atommass"]],["self"]]],[11,"from","","",35,[[["atomnumber"]],["self"]]],[11,"from","","",36,[[["energy"]],["self"]]],[11,"from","","",37,[[["atomcharge"]],["self"]]],[11,"from","","",38,[[["mass"]],["self"]]],[11,"from","","",39,[[["moles"]],["self"]]],[11,"from","","",40,[[["sep"]],["self"]]],[11,"from","","",41,[[["sef"]],["self"]]]],"paths":[[3,"Atom"],[3,"Container"],[3,"ContainerCompound"],[3,"Ion"],[3,"Molecule"],[3,"MoleculeCompound"],[3,"ElemReaction"],[3,"ReactionSide"],[3,"ReactionCompound"],[3,"RedoxReaction"],[3,"AtomGroup"],[3,"AtomMass"],[3,"AtomNumber"],[3,"Energy"],[3,"AtomCharge"],[3,"Mass"],[3,"Moles"],[3,"SEP"],[3,"SEF"],[3,"ELECTRON"],[3,"HYDROXIDE"],[3,"AMMONIUM"],[3,"SULPHATE"],[3,"WATER"],[3,"CO2"],[3,"AMMONIA"],[3,"SUGAR"],[3,"COPPER_SULFATE_HYDRATED"],[3,"SEFMAP"],[3,"SEPMAP"],[8,"Element"],[8,"Properties"],[8,"Reaction"],[6,"AtomGroup_type"],[6,"AtomMass_type"],[6,"AtomNumber_type"],[6,"Energy_type"],[6,"AtomCharge_type"],[6,"Mass_type"],[6,"Moles_type"],[6,"SEP_type"],[6,"SEF_type"]]};
initSearch(searchIndex);
